Ruby Notes

001 Basic Notes
  001.1 Commenting
002 Terms/Definitions
003 Basic Commands
004 Numbers
005 Strings
  005.1 String Interpolation
  005.2 Method Chaining
006 Arrays
  006.1 Multidimensional Arrays
007 Hash
  007.1 Looping Hashs
008 Symbol
  008.1 HashSymbol Notation
009 The 4 Variable Types
0010
0012 Conditional

===================
Basic Notes 001
===================

http://apidock.com
http://apidock.com
http://apidock.com
http://apidock.com
http://apidock.com
http://apidock.com
http://apidock.com


Variables must start with a letter no numbers or special characters
no spaces can only use _ underscores
------------------------------
Example:
joshuas_cookies == correct =D
#apples and oranges == wrong
------------------------------

Puts "name" - cout/print/ displays "name"

auto declaration = good but also bad imo

-----------
Commenting
-----------
# anything on this line will be a comment and it will not be counted

=begin
  anything in between these 2 will be commented
  but the =begin and =end must be against the left wall
=end

 =begin
    wrong
  =end
----------------

=======================
Terms/Definitions 002
=======================
interation - one at a time


===================
Basic Commands 003
===================

.class - returns data type
puts "name" - cout/print/ displays "name"
gets - takes an input from the user + end line /caridge return
gets.chomp - removes endline/caridge return

.to_i - converts to integer/fixnum
.to_s - converts to a string
.to_a - converts to array
.lines - splits string up in correlation to difference in lines
.reverse!
! - makes methods change the variable permanently instead of temporarily
.clear - removes data or value from the variable

------------------------------
Example:
puts "how old are you?"
age = gets
puts age
age.class = string
--------------------
Example: !
josh = "josh"
puts josh.reverse - prints hsoj
puts josh - prints josh
puts josh.reverse! - prints hsoj
puts josh - prints hsoj
------------------------------
====================
Numbers 004
====================

.gdc - greatest common denominator
.pred - decrements
** - raises number to that power 2**3 = 8
.next - returns number + 1 1.next = 2, (-1).next = 0
odd? - returns true if variable is odd
even? - returns true if variable is even
prime? - returns true if variable is a prime false for composite


===================
Strings 005
===================
.upcase - changes all string letters to uppercase
.downcase - changes all to string letters to lowercase
.reverse - reverses order of string
.capitalize - capitalizes first word/letter
.length - returns the length of the string
.to_s - changes current data type to a string

.chop - returns value with last character removed
.succ - returns the next possible letter/number example: "zzz999".succ = "aaa000"
.replace "name" - replaces the values in the current string with name
.delete "n", "a" - removes n and a from the current string

-----------------------
String Interpolation 005.1
-----------------------
#{name}
#{1+1} - prints name or any valid ruby code

\' - prints single quote '
\n - returns to a new line
\t - tabs
NOTICE: String Interpolation does not worth with single quotes ''
        String Interpolation only works with double quotes ""
-------------------------------------------------------------------

---------------------------
Method Chaining / example 005.2
------------------------------------
"joshua".reverse.upcase = "AUHSOJ"
"AUHSOJ".reverse.downcase = "joshua"
---------------------------------------


===================
Arrays 006
===================
.count / .size / .length - returns amount of indexes or how big the array is
.max - returns the highest valued number
.sort - changes numbers into ascending
.pop - removes last element/index

fruit = [apple,orange,grape]
fruit[0] - returns apple, fruit[1] - returns orange, fruit[2] - returns grape.

-------------------------
Array Concatination 006.1
-------------------------
fruit << banana - adds banana into the array onto the end, fruit[3] = banana
fruit << banana << strawberry << rasberry
adds them onto the end, apple, orange, grape, banana, strawberry, rasberry

fruit.push("banana, strawberry, rasberry"

fruit.each do |dog|
////// dog = fruit[x] x++ x goes up each time cycling through the array \\\\\\\\\
puts dog - returns each part of that array one at a time
end

---------------------------------

-------------------------
Multidimensional Arrays 006.2
-------------------------
things ["jake", 1, 3, ["josh, 4, .2"] ]
things
        [
  things[0] -  "jake"
  things[1] -   1
  things[2] -   3
  things[3] -  ["josh", 4, .2] - things[3]
      things[3][0] - josh
      things[3][1] - 4
      things[3][2] - 2
  things[4] - 7
        ]
-------------------------

------------------------
Example:
joshua = [2,3,1]
joshua.sort = [1,2,3]
joshua.max = 3

-------------------------

fruit.each do |dog|
////// dog = fruit[x] x++ x goes up each time cycling through the array \\\\\\\\\
puts dog - returns each part of that array one at a time
end



=================
Hash Variable 007
=================
you can name each point/index in the hash but they must be unique

0       1      2       3
[]      []      []      []
box1    box2    box3    box4

storage = {"Box 1" => "Stuff". "Box 2" => "More stuff"}

puts storage["Box 1"]

doge { "cat1" => 1, "cat2" => 2,
"other" => ["cats", "monkey", "elaphant"]
}


-----------------
Looping Hashes 007.1
-----------------
doge.each_key do |key| or doge.each_value do |value|
    puts "the key is #{key} and the value is #{value}"
    or
    puts "the key is " + key
    puts "and the value is " + value

end

doge.each_pair do |key, value|
    puts "the key is #{key} and the value is #{value}"
    or
    puts "the key is " + key
    puts "and the value is " + value
/// prints out both keys and values \\\
end
----------------

===================
Symbol :name   008
===================

Mainly used in hashes
very similar to a string
-----------------------
Hash Symbol Notation
------------------------
me = {:name => "josh", :age => 32, :height => "tall", :weight =< "fat at heart"}
puts me[:name] - returns josh
me[:sex] = "Yes, Please"
:sex is added in with the value "Yes, Please"
me[:sex] = "Male"
sex now equals male

{ 'food' => 'taco'}
{:food => 'taco'}
{food: 'taco'}
------------------------------
{'data-url' => 'http://www.google.com'}
{:data-url => 'http://www.google.com'}
    ^^^^^ "-" doesn't work in symbols

=======================
The 4 Variable Types 09
=======================

local_variable = "Hello"

@instance_variable = "josh"

@@class_vairable = "Human"

$global_variable = "DO NOT USE"


      $global_variable
|-----------------------------|
|     @@class_variable        |
|    |--------------------|   |
|    | @instance variable |   |
|    |  |--------------|  |   |
|    |  |              |  |   |
|    |  |local variable|  |   |
|    |  |              |  |   |
|    |  |              |  |   |
|    |  |              |  |   |
|    |  |              |  |   |
|    |  |--------------|  |   |
|    |                    |   |
|    | -------------------|   |
|                             |
|-----------------------------|


=======================
Boolean And Comparison 10
=======================
true = true
false = false
nil = false
false and nil are the only things that aquate to false if not then it is true

== - "dog" == "dog" true, "Dog" == "dog" false
!= - "cat" != "dog" true, "cat" != "cat" false
> - 6 > 3 = true, 3 > 6 = false
< - 8 < 4 = false, 4 < 8 = true
>= - 4 >= 4 = true, 4 >= 7 = false, 4 >= 2 = true
<= - 4 <= 4 = true, 4 <= 7 = true, 4 <= 2 = false

|| / or - one of the comparisons has to be true for it to return a value of true
&& / and - both of the comparisons have to be true/corecct for it to return a value of true

-------------------
Example:
or
  1 + 1 = 2 or 2 + 2 = 4,  1 + 1 = 2 || 2 + 2 = 4
and
  1 + 1 = 2 and 2 + 2 = 4,  1 + 1 = 2 && 2 + 2 = 4
---------------------------------------------------


=======================
If Elsif Unless 011
=======================
if some_condition
  do_stuff
end

if happy == true
  puts "yay"
end

if happy != true
  puts "sad"
else
  puts "yay"
end

  unless happy == false
      "sad"
  else
    "yay"

puts "Im happy" unless happy == false

puts "Im Happy" if sad != true



----------------
elsif 11.1
----------------
if your_grade > 90
    puts "You get an A"

  elsif your_grade >= 80 && your_grade < 90
    puts "You get a B"

  elsif your_grade >= 70 && your_grade < 80
    puts "You get a C"

  elsif your_grade >= 60 && your_grade < 70
    puts "You get a D and you need to study more"

  else
    puts "You Fail"
end
------------------------------------------------
----------------
Case Statement 11.2
----------------
case grade
  when 'A'
    puts "YAY Good Job"
  when 'B'
    puts "Not Too Shabby"
  when 'C'
    puts "might want to put some time into that"
  when 'D'
    puts "not doing too well"
  when 'F'
    puts "ok, you failed"
  else
    puts "don't know how you managed to get #{grade}"
end
-------------------------------------------------




=======================
Loops 012
=======================

while x < 10
x + 1

                                              prints
            is x > 10?                           0
x=0  ________         ___________ end            1
             \       / <-yes                     2
              \__>__/                            3
              /      \                           4
             /   no-> \                          5
     x + 1   |        |                          6
             ^        V                          7
             |        |                          8
              \___<__/                           9
                puts "x"                        10

          loop runs 10 times


while nemo_is_still_lost

  puts "just keep swimming"

end

do loop

    puts "just keep swimming"

  break if nemo_is_found
end
