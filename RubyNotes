Ruby Notes


 ///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
 \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

DDDDDDDDDDDDDDDDDD          PPPPPPPPPPPPPPPPPPPPP          LLLLLL
DDDDDDDDDDDDDDDDDDDD        PPPPPPPPP       PPPPPPP        LLLLLL
DDDDD           DDDDD       PPPPPPPP         PPPPPPP       LLLLLL
DDDDD            DDDDD      PPPPPPPP         PPPPPPP       LLLLLL
DDDDD             DDDDD     PPPPPPPPP       PPPPPPP        LLLLLL
DDDDD             DDDDD     PPPPPPPPPPPPPPPPPPPPPP         LLLLLL
DDDDD             DDDDD     PPPPP                          LLLLLL
DDDDD            DDDDD      PPPPP                          LLLLLL
DDDDD           DDDDD       PPPPP                          LLLLLL
DDDDDDDDDDDDDDDDDDD         PPPPP                          LLLLLLLLLLLLLLLLLLLLL
DDDDDDDDDDDDDDDDD           PPPPP                          LLLLLLLLLLLLLLLLLLLLL

\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
 \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
 ////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

001 Basic Notes
  001.1 Commenting
002 Terms/Definitions
003 Basic Commands
004 Numbers
005 Strings
  005.1 String Interpolation
  005.2 Method Chaining
006 Arrays
  006.1 Multidimensional Arrays
007 Hash
  007.1 Looping Hashs
008 Symbol
  008.1 HashSymbol Notation
009 Scope / The 4 Variable Types
010 Boolean And Comparison
011 If Elsif Unless
  011.1 Elsif
  011.2 Case Statement
  011.3 Ternary Operator
012 Loops
013 Methods
  013.1 Def Method Types
  013.2 Instance Methods
014 Classes
  014.1 Derived Class
  014.2 Instantiation
015 Classes Continued - Attributes or Attr
  015.1 Class Methods
016 Module
017 File Linking
018 System Commands and Manipulating Files
  018.1 Modes for Writing/Reading to File
019 Errors/Debugging
  019.1 Types of Errors
  019.2 Begin / Raise


Setting up Sinatra
CSS - Cascading Style Sheets




===================
Basic Notes 001
===================

http://apidock.com
http://apidock.com
http://apidock.com
http://apidock.com
http://apidock.com
http://apidock.com
http://apidock.com

Variables must start with a letter no numbers or special characters
no spaces can only use _ underscores
------------------------------
Example:
joshuas_cookies == correct =D
#apples and oranges == wrong
------------------------------

Puts "name" - cout/print/ displays "name"

auto declaration = good but also bad imo

-----------
Commenting
-----------
# anything on this line will be a comment and it will not be counted

=begin
  anything in between these 2 will be commented
  but the =begin and =end must be against the left wall
=end

 =begin
    wrong
  =end
----------------


=========================
Terms/Definitions 002
=========================
interation - one at a time


=====================
Basic Commands 003
=====================
.class - returns data type
puts "name" - cout/print/ displays "name"
gets - takes an input from the user + end line /caridge return
gets.chomp - removes endline/caridge return

.to_i - converts to integer/fixnum
.to_s - converts to a string
.to_a - converts to array
.lines - splits string up in correlation to difference in lines
.reverse!
! - makes methods change the variable permanently instead of temporarily
.clear - removes data or value from the variable

------------------------------
Example:
puts "how old are you?"
age = gets
puts age
age.class = string
--------------------
Example: !
josh = "josh"
puts josh.reverse - prints hsoj
puts josh - prints josh
puts josh.reverse! - prints hsoj
puts josh - prints hsoj
------------------------------


====================
Numbers 004
====================

.gdc - greatest common denominator
.pred - decrements
** - raises number to that power 2**3 = 8
.next - returns number + 1 1.next = 2, (-1).next = 0
odd? - returns true if variable is odd
even? - returns true if variable is even
prime? - returns true if variable is a prime false for composite


===================
Strings 005
===================
.upcase - changes all string letters to uppercase
.downcase - changes all to string letters to lowercase
.reverse - reverses order of string
.capitalize - capitalizes first word/letter
.length - returns the length of the string
.to_s - changes current data type to a string
.chop - returns value with last character removed
.succ - returns the next possible letter/number example: "zzz999".succ = "aaa000"
.replace "name" - replaces the values in the current string with name
.delete "n", "a" - removes n and a from the current string

---------------------------
String Interpolation 005.1
---------------------------
#{name}
#{1+1} - prints name or any valid ruby code

\' - prints single quote '
\n - returns to a new line
\t - tabs
NOTICE: String Interpolation does not worth with single quotes ''
        String Interpolation only works with double quotes ""
-------------------------------------------------------------------

---------------------------
Method Chaining / example 005.2
------------------------------------
"joshua".reverse.upcase = "AUHSOJ"
"AUHSOJ".reverse.downcase = "joshua"
---------------------------------------


===================
Arrays 006
===================
.count / .size / .length - returns amount of indexes or how big the array is
.max - returns the highest valued number
.sort - changes numbers into ascending
.pop - removes last element/index

fruit = [apple,orange,grape]
fruit[0] - returns apple, fruit[1] - returns orange, fruit[2] - returns grape.

-------------------------
Array Concatination 006.1
-------------------------
fruit << banana - adds banana into the array onto the end, fruit[3] = banana
fruit << banana << strawberry << rasberry
adds them onto the end, apple, orange, grape, banana, strawberry, rasberry

fruit.push("banana, strawberry, rasberry"

fruit.each do |dog|
////// dog = fruit[x] x++ x goes up each time cycling through the array \\\\\\\\\
puts dog - returns each part of that array one at a time
end

---------------------------------

-------------------------
Multidimensional Arrays 006.2
-------------------------
things ["jake", 1, 3, ["josh, 4, .2"] ]
things
        [
  things[0] -  "jake"
  things[1] -   1
  things[2] -   3
  things[3] -  ["josh", 4, .2] - things[3]
      things[3][0] - josh
      things[3][1] - 4
      things[3][2] - 2
  things[4] - 7
        ]
-------------------------

------------------------
Example:
joshua = [2,3,1]
joshua.sort = [1,2,3]
joshua.max = 3

-------------------------

fruit.each do |dog|
////// dog = fruit[x] x++ x goes up each time cycling through the array \\\\\\\\\
puts dog - returns each part of that array one at a time
end


===================
Hash Variable 007
===================
you can name each point/index in the hash but they must be unique

0       1      2       3
[]      []      []      []
box1    box2    box3    box4

storage = {"Box 1" => "Stuff". "Box 2" => "More stuff"}

puts storage["Box 1"]

doge { "cat1" => 1, "cat2" => 2,
"other" => ["cats", "monkey", "elaphant"]
}


----------------------
Looping Hashes 007.1
----------------------
doge.each_key do |key| or doge.each_value do |value|
    puts "the key is #{key} and the value is #{value}"
    or
    puts "the key is " + key
    puts "and the value is " + value

end

doge.each_pair do |key, value|
    puts "the key is #{key} and the value is #{value}"
    or
    puts "the key is " + key
    puts "and the value is " + value
/// prints out both keys and values \\\
end
----------------


====================
Symbol :name   008
====================

Mainly used in hashes
very similar to a string
-----------------------
Hash Symbol Notation
------------------------
me = {:name => "josh", :age => 32, :height => "tall", :weight =< "fat at heart"}
puts me[:name] - returns josh
me[:sex] = "Yes, Please"
:sex is added in with the value "Yes, Please"
me[:sex] = "Male"
sex now equals male

{ 'food' => 'taco'}
{:food => 'taco'}
{food: 'taco'}
------------------------------
{'data-url' => 'http://www.google.com'}
{:data-url => 'http://www.google.com'}
    ^^^^^ "-" doesn't work in symbols


==========================
The 4 Variable Types 009
==========================

local_variable = "Hello"

@instance_variable = "josh"

@@class_vairable = "Human"

$global_variable = "DO NOT USE"


      $global_variable
|-----------------------------|
|     @@class_variable        |
|    |--------------------|   |
|    | @instance variable |   |
|    |  |--------------|  |   |
|    |  |              |  |   |
|    |  |local variable|  |   |
|    |  |              |  |   |
|    |  |              |  |   |
|    |  |              |  |   |
|    |  |              |  |   |
|    |  |--------------|  |   |
|    |                    |   |
|    | -------------------|   |
|                             |
|-----------------------------|


============================
Boolean And Comparison 010
============================
true = true
false = false
nil = false
false and nil are the only things that aquate to false if not then it is true

== - "dog" == "dog" true, "Dog" == "dog" false
!= - "cat" != "dog" true, "cat" != "cat" false
> - 6 > 3 = true, 3 > 6 = false
< - 8 < 4 = false, 4 < 8 = true
>= - 4 >= 4 = true, 4 >= 7 = false, 4 >= 2 = true
<= - 4 <= 4 = true, 4 <= 7 = true, 4 <= 2 = false

|| / or - one of the comparisons has to be true for it to return a value of true
&& / and - both of the comparisons have to be true/corecct for it to return a value of true

-------------------
Example:
or
  1 + 1 = 2 or 2 + 2 = 4,  1 + 1 = 2 || 2 + 2 = 4
and
  1 + 1 = 2 and 2 + 2 = 4,  1 + 1 = 2 && 2 + 2 = 4
---------------------------------------------------


=======================
If Elsif Unless 011
=======================
if some_condition
  do_stuff
end

if happy == true
  puts "yay"
end

if happy != true
  puts "sad"
else
  puts "yay"
end

  unless happy == false
      "sad"
  else
    "yay"

puts "Im happy" unless happy == false

puts "Im Happy" if sad != true

----------------
Elsif 11.1
----------------
if your_grade > 90
    puts "You get an A"

  elsif your_grade >= 80 && your_grade < 90
    puts "You get a B"

  elsif your_grade >= 70 && your_grade < 80
    puts "You get a C"

  elsif your_grade >= 60 && your_grade < 70
    puts "You get a D and you need to study more"

  else
    puts "You Fail"
end
---------------------
Case Statement 11.2
---------------------
used to replace if/else when you would normally have more then 3 eslifs
can replace 'A' with variable or number

case grade
  when 'A'
    puts "YAY Good Job"
  when 'B'
    puts "Not Too Shabby"
  when 'C'
    puts "might want to put some time into that"
  when 'D'
    puts "not doing too well"
  when 'F'
    puts "ok, you failed"
  else
    puts "don't know how you managed to get #{grade}"
end

-----------------------
Ternary Operator 11.3
-----------------------
shorthand if statement

result = x < y ? "YEAH!" : "Nope"

if x < y
  puts "YEAH!"
else
  "Nope"
end

-----------------------------

=======================
Loops 012
=======================

while x < 10
x + 1

                                              prints
            is x > 10?                           0
x=0  ________         ___________ end            1
             \       / <-yes                     2
              \__>__/                            3
              /      \                           4
             /   no-> \                          5
     x + 1   |        |                          6
             ^        V                          7
             |        |                          8
              \___<__/                           9
              puts "x"                          10

          loop runs 10 times


while nemo_is_still_lost

  puts "just keep swimming"

end



do loop

    puts "just keep swimming"

  break if nemo_is_found
end


=================
Methods 013
=================
method - a way to name a set of instructions
parameter/arguement - passing a local variable into a method

def method_name()

end

method_name()

---------------------
with Arguement
----------------------
def grab_food(food)
  puts "grabbing some food"
  puts food
end

grab_food("sushi")
---------------------------
with multiple Arguements
---------------------------
def grab_food(food, drink)
  puts "grabbing some #{food}"
  puts "drinking some #{drink}"
end

grab_food("sushi","sake")
-----------------------------

-----------------------
Def Method Types 013.1
------------------------------
This method here is asking a Question
will return true or false

  def old_enough?

  end

Destructive Method
def die!
  #Destructive Method
end
def name = (new_name)
  #Writer Method
end
def old_enough_to_vote?
  #Preticate/Boolean Method
end
def age
  #Reader Method
end
---------------------------------------

-------------------------------
 Instance Methods 013.2
-------------------------------
can only be called on an instance of String class not THE String class
for example length is a instance method not a class method
class String
  def reverse
  end
  def length
  end
end

====================
Classes 014
====================
Cannot begin with numbers
Class's have to begin with capital letter
Constant is opposite of variable
Constants cannot change
Constants begin with capitol letter
Instantiation - to create a new instance of an object


class ClassName

end

constant
PI = 3.14

class Animal
  def play
  end
  def run
  end
  def sleep
  end
end
----------------------
Derived Class 014.1
----------------------
class Human < Animal
  def play_computer_games

  end
end

----------------------------------------
Instantiation 014.2
----------------------------------------
Instantiation - to create a new instance of an object

class Animal
  def eat
    puts "eating food"
  end
end
cat = Animal.new
cat.eat

This method gets called every time we call
.new on a class
def initialize

end

=============================
Class Continued - Attr 015
=============================
shorthand to creating methods for you?
attr_writer - assign a value to one of the attributes / assign value
attr_read - allows retrieval of attributes / return value
attr_accessor - basically attr_writer and attr_reader / assign and return

class Chair
  att_writer :color, :size, :weight
  attr_reader :color, :size, :weight
  attr_accessor :color, :size, :weight
end

---------------
Without Attr

class Chair
  # Reader method
  def color
    @color
  end
  # Writer method
  def color=(new_color)
    @color = new_color
  end
end
----------------
With Attr

class Chair
  attr_accessor :color, :size, :weight
end

-----------------------
 Class Methods 015.1
-----------------------
self referenses Human, self = current object i am in
can only be called by class
person = Human.new, person.evolve doesn't work
         only Human.evolve or self.evolve
last evalutated variable/instance is what gets returned
would self return variable name? or variable type or value
if self doesn't have a value what does it return? blank?


  class Human
    def self.evolve
    end

end

common use

class Human

def self.class_name
  puts name
end

def self.create_boy
  baby = new / Human.new / self.new
  baby.sex = "Male"
  baby
end

def self.create_girl
  baby = new
  baby.sex = "female"
  baby
end

-----------------------------------------------------------------------------
Example:

class Human
/////// WITH ATTR \\\\\\\
    attr_accessor :hair_color, :eye_color, :number_of_fingers,
          :number_of_toes, :heart_rate, :skin_color, :sex, :name
\\\\\\ WITH ATTR ////////

    def initialize
      @hair_color = "black"
      @eye_color = "green"
      @number_of_fingers = "10"
      @number_of_toes = "10"
      @heart_rate = "150bpm"
      @skin_color = "pale and goey"
      @sex = "female"
    end
////// WITHOUT ATTR \\\\\\\
    # Reader Method
    def skin_color
      @skin_color
    end
    # Writer Method
    def skin_color=(new_skin_color)
      @skin_color = new_skin_color
    end
\\\\\\ WITHOUT ATTR /////
end
-----------------------------------------------------------------------------


===============
Modules 016
===============
Modules are constants

module Transportation
  def going_forward
    puts "going forward"
  end
end

either include modules or extend modules

include - methods become instance methods
extend - methods become class methods
---------------------------------------
Example:
class Car
  include Transportation
end
  c = car.new
  c.going_forward
--------------------------
class car
  extend Transportation
end
  Car.going_forward
----------------------------------------


==================
File Linking 017
==================

require 'name' #of file
if it works result of statement will be true

will return false if already acquired

requires load path which is essential a array of strings
directory listing of all the files located

require '/Users/joshua/Desktop/projects/ruby_stuff/require_ractice/first'
    or
require_relative 'first'
relative to the current files location there should be another file by this name

adding into rubys default library

$LOAD_PATH '/Users/joshua/Desktop/projects/ruby_stuff/require_ractice/first'

only stores during the life of your application

------------------------------
Ruby's Built In Methods 016.1
----------------------------------
net/http -
open-uri -
date - has many methods concerning dates
google -
----------------------------------------------


===========================================
System Commands \ Manipulating Files 018
===========================================
Persistance a way to store your data so you can retreive it later
you can choose how to store your data in any format

system("ls")
backticks work as a shortcut to system command - `pwd` `ls`

File.exists("car.rb") - returns boolean true or false
Dir.exists?("RubyStuff") - returns boolean true or false

File.basename("#{Dir.pwd}/car.rb") - returns path to car.rb
File.extname("logo.jpg") - returns ".jpg"
File.dirname("car.rb") - returns "." take the file you have and return the current directy and the dot symbolizes
                                     I am in the current directory that this file is located
filepath = File.join("/", "Users", "jeremy", "Desktop")
Dir.chdir(filepath)

new_file = File.new("first_file.txt","w+")
                          |            |_ _ _ _ _ _ File Mode
                          |_ _ _ _ Name of file you wish to make

new_file.write("hello") - writes hello to the file

new_file.close - closes the file

/ \ / \ / \ / \ / \ / \ / \ / \ / \ / \ / \ / \ / \ / \ / \ / \ / \ / \ / \ / \ / \ / \ / \ / \ / \ / \ / \ / \ / \ / \ / \ / \ / \ / \ / \ / \ / \ / \ / \ / \ / \ / \ / \

YOU MUST CLOSE ALL FILES AFTER DONE USING OR ELSE MEMORY LEAKS AND OTHER BAD PROBLEMTS

\ / \ / \ / \ / \ / \ / \ / \ / \ / \ / \ / \ / \ / \ / \ / \ / \ / \ / \ / \ / \ / \ / \ / \ / \ / \ / \ / \ / \ / \ / \ / \ / \ / \ / \ / \ / \ / \ / \ / \ / \ / \ / \ /

new_file = File.open("first_file.txt", "r") - opens new_file

new_file.read - read file
new_file.eof? - end of file returns boolean

Dir.pwd - shows your file location in the computer returns it as a string
Dir.glob("*.rb") gather up all the files in the current directory that end in .rb

new_file.readlines - puts all the file lines into an array each line going into a corrosponding spot in te array

YAML - Yaml aint mark-up language
plain text file that has a specific structure to how you format your text

require 'yaml' - must require yaml in order to use yaml

contacts:  . . . . . . . . . . hash1 - Key1
 . . . . . . . . . . . . . . . hash1 - info1
                              {
  -  . . . . . . . . . . . . . Array Spot 1
    name: Josh . . . . . . . . hash2 - key1, info1
    hobby: Glow Sticking . . . hash2 - key2, info2
  -  . . . . . . . . . . . . . Array Spot 2
    name: Ty
    hobby: jui-jitzu
  -
    name: Will
    hobby: Poker
  -
    name: Jason
    hobby: Pole Dancing
                                }


--------------------------------------------
Modes for Writing/Reading to File 018.1
--------------------------------------------

Mode |  Meaning
-----+--------------------------------------------------------
"r"  |  Read-only, starts at beginning of file  (default mode).
-----+--------------------------------------------------------
"r+" |  Read-write, starts at beginning of file.
-----+--------------------------------------------------------
"w"  |  Write-only, truncates existing file
     |  to zero length or creates a new file for writing.
-----+--------------------------------------------------------
"w+" |  Read-write, truncates existing file to zero length
     |  or creates a new file for reading and writing.
-----+--------------------------------------------------------
"a"  |  Write-only, starts at end of file if file exists,
     |  otherwise creates a new file for writing.
-----+--------------------------------------------------------
"a+" |  Read-write, starts at end of file if file exists,
     |  otherwise creates a new file for reading and
     |  writing.
-----+--------------------------------------------------------
 "b" |  Binary file mode (may appear with
     |  any of the key letters listed above).
     |  Suppresses EOL <-> CRLF conversion on Windows. And
     |  sets external encoding to ASCII-8BIT unless explicitly
     |  specified.
-----+--------------------------------------------------------
 "t" |  Text file mode (may appear with
     |  any of the key letters listed above except "b").

======================
Gems amd Frameworks
======================

pry - debugging gem, beefed up version of irb with debugging, terminal like syntax
Chef - Multi-server managment
Shoes - Cross Platform Manager
Highline- Rubygem for terminal based applications
Gosu - 2d Video Game Development in Ruby
Waves - 3d Video game Development

-----------------------
Pry
irb debugger
binding.pry
ls - lists out all the methods
cd - cd into a particular object / class
-----------------------

=======================
Errors / Debugging 19
=======================


~~~~~~~~~~~~~ Original Error ~~~~~~~~~~~~~~~~~

debugging.rb:8:in 'say': wrong number of arguements
(0 for 1) (ArguementError)
        from debugging.rb:16:in '<main>'



~~~~~~~~~~~~ Labeled Error ~~~~~~~~~~~~~~~~~~~~
                            Description
            line    method?     |
             |      |           |
             v      v           v
debugging.rb:8:in 'say': wrong number of arguements
(0 for 1) (ArguementError) < - - - - - - - - - - - - - - Error Class
        from debugging.rb:16:in '<main>' < - - - - Error Location


~~~~~~~~~~~~~~~ Error with Comments/Lables ~~~~~~~~~~~~~~~~~~

                        Description of Error
                                |
                                |
                                v
debugging.rb:19:in `/':   divided by 0   (ZeroDivisionError) < - - - - - What Class the Error is apart of
              ^
              |_ _ _ _ _ _ What Line the Error Occured on
                     |
                     v
	from debugging.rb:19:in `<main>' < - - - - - Error Occured in main

----------------------
Types of Errors 019.1
------------------------

ArguementError -
didn't pass in an arguement into my say method
debugging.rb:8:in 'say': wrong number of arguements
(0 for 1) (ArguementError)
        from debugging.rb:16:in '<main>'

NameError -
Entered name wrong Geeter = Greeter
debugging.rb:15:in `<main>': uninitialized constant Geeter (NameError)

Entered gets wrong
debugging.rb:16:in `<main>': undefined local variable or method `gts' for main:Object (NameError)

----------------------
Begin/Raise 019.2
------------------------
begin  -- - --- -
|    10/0        | - - - -- if anywhere in here fails it will do rescue or this
- -- - - - - - - -                                                          |
rescue                                                                      |
  "there was an error"  -  -  -  -  -  - - - - - - - - - - - - - - - - - - -


begin
    10 / 0
rescue ZeroDivisionError - you can specify what you want the being/rescue to look for in this case ZeroDivisionError
    "You divided by zero"


or
                                                              debugging.rb:8:in 'say': wrong number of arguements
                                                              (0 for 1) (ArguementError)
                                                                      from debugging.rb:16:in '<main>'
                                                                                  ^
begin                                                                             |
  g = Greeter.new("Jeremy")                                                       |
  puts g.say                                                                 e = -| - - but a little bit simpler
rescue  ArguementError => e  = original error message, now the original error message is accepted as a string so you input the name of the string you want the error message to be in
  puts "You are missing an arguement"  -  -  -  -  -
                                                    | -  - now you can print both the original error message and a custom message to inform the user or you exactly what you could want
  puts error  -  -  -  -  -  -  -  -  -  -  -  -  -
rescue ZeroDivisionError
  puts "You are trying to divide by 0. stop.. "
end


x = 1
raise "x = 1 The application got to this point"
  "x = 1"
              ^
              |
              |
              |
              v
/////////////////////////////////////////////////////////////////////////////////

      prints this if x = 1
debugging.rb:36:in `<main>': x = 1 application got to this point (RuntimeError)

\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\


\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\////////////////////////////////////
||||||||||||||||||| UNFINISHED & UNORGANIZED NOTES ||||||||||||||||||
//////////////////////////////////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\


def get(path, options = {}, &block)
puts before block
yield
puts after block
end

end r = Router.new

r.get(”thing, {protocol: ‘https’}) do
puts “inside block”
end


def debug(*data)
	data.each do |datum|
		puts datum
	end
end

r.debug (“hello’, “people”, “Guys”, “girls”, “151”, “27”)





=====================================
Setting up a Website with Sinatra
=====================================


Gemfile
source "htttps://rubygems.org"

gem "sinatra"

.ruby-version
2.1.2

.ruby-gemset
cats #project name

cd out then cd back in
reloads files
rvm current to check
then bundle to install all the gems we need

#http Verb GET
get '/' do
  'YAY! My first site.'
end

i want to 'get' this page '/' which is homepage
print string "yay! my first site." to '/'

www.mysite.com /
               ^
indicates its the homepage

www.mysite.com/aboutus/ruby
                  ^      ^
                   routes

localhost:4567

localhost - my computer/machine

localhost:4567 on my machine access

4567 - port
you can have multiple websites on each computer
the port seperates that and says this site is differnet then this other site
so we are specifically running this site on 4567 or port: 4567

sinatra has a mini web server that runs
and when you run  sinatra boots up this weber server on port4567

Old Way
get '/' do
  file.open(views/index.html)
end

or
New Way
get '/' do
  erb :index
end

loads index.erb into


if you edit ruby file program you have to restart it
if you edit html files you don't have to restart it
sinatra specifically looks for html/erb folders called views

<% %>
1. to print something 99% of the time you will use this
2. to do something 1% of the time you will use this

<%= 1 + 1 %> prints 2
<%= josh %> prints josh

=====================================
 CSS - Cascading Style Sheets
=====================================
*{
  effects everything
}
body {
  effects the body tag not everything in the body
}
#wrap {
  # indicates it an ID and the value of the ID is wrap
  Ids are unique
}
.row {
  the "." Signifies that its a class with the value of row
  they are not unique and applys to every class with the value of row
}
input[type=text] {
  all input tags with this attribute with this value
  input - being the value
  type - being the attribute
  text - being the value
}
ul > li {
  find ul elements then find all of its immediant children and apply styles to that element
  ul benig the parent
  li being the child - all styles apply to the child
}
a:hover, a:active, a:focus {
  apply these styles to all of these things
  a:hover - find all achors where the mouse is currently hovering over them
  a:active - find all ancshors wehre the mouse currently has a button down on them
  a:focus - find all anchors that are currently focused
  pusedo classes a way to define a specific action
}
div p.small{
  this says find all the p tags that have a class of small that are inside of a div
  class being small
  p tag
  inside of div
}


px - pixels, a way to determine size

div#wrap
{
  width: 980px;
  margin: 0 auto;
  border: 1px solid #ff9900;
  padding: 10px;
  box-shadow: 1px 1px 10px #333333;
  border-radius: 4px;
  background-colr: #eeeeee;
  font-size: 16px;
  color: #333333;
  font-family: Helvetica;
}


#RRGGBB
 | | |
 | | Blue
 | Green
Red

#ffffff - white
#dddddd - closer to white
#333333 - closer to black
#000000 - black
#ff9900 - all the red medium green no blue


solid rgba(255, 190, 0, 0.5)
                         ^
                         0 means transparent
                         1 opague

******************************************************

  HHH   HHH    ttt                         lll
  HHH   HHH    ttt                         lll
  HHH   HHH  ttttttt                       lll
  HHHHHHHHH    ttt       mm mm mm mmmmmm   lll
  HHH   HHH    ttt       mmm    mmm    mm  lll
  HHH   HHH    ttt  ttt  mm      m     mm  lll
  HHH   HHH     tttttt   mm            mm  lll

******************************************************








**************************************************************************************

   jjjjjjjjjjjj
   jjjjjjjjjjjj
           jjjj
           jjjj
           jjjj        aaaaaa      vv        vv     aaaaaa
           jjjj      aa   aaa       vv      vv    aa   aaa
  jjjj     jjjj      aa   aaaa       vv    vv     aa   aaaa
  jjjj     jjjj      aa   aa aa       vv  vv      aa   aa aa
     jjjjjjj           aaa    aa       vvvv         aaa    aa


              ssssss
            ssssssssss
          sss       sss                     iii                      ttt
          sss                               iii                      ttt
            sssssssss                                              ttttttt
              ssssssss      rrr  rrrrr      iii     ppp  ppp       ttttttt
                     sss    rrrrrr   rrr    iii     ppppp   ppp      ttt
          sss        sss    rrr             iii     ppppp   ppp      ttt
            ssssssssss      rrr             iii     ppp  ppp         ttt  ttt
              ssssss        rrr             iii     ppp               ttttt
                                                    ppp
                                                    ppp
***************************************************************************************

"Hello World" - string
'This is a what?' - string
1234 - number
432.34 - number
[] - array
{} - an object
// to comment
no string interpolation

"1 plus 1 equals ".length

"joshua".capitalize()

very first word in the function starts with a lower case then the preceeding ones are uppercase
reffered to as camelcasing

.toUpperCase

parseInt("1", 10)


var name = "Jeremy"

without the var it makes it a local variable
you generally want to make them a var

let

var firstname = "Joshua";
var lastName = "Cloward";
var name = firstName + " " + lastName;

"my name is " + name;

typeof - special keyword returns data type

typeof 1 - "number"

Array

names = ["josh", "jason", "will"];

names[3] = "Ty";

names.push("Ty");

Objects

var dog = {name: 'fluffy', age: 3}; - called an Object

dog["name"] - all keys returned using a string
even though it isn't defined as a string you still return it as a string

dog['breed'] = 'pit bull';
dog.breed = 'pit bull'; both add breed with the value of pit pull into the object

dog.age  - returns age
dog.breed - returns pit bull
dog.name - returns fluffy

creates a new variable


console.log = puts in ruby or printing to console in the webrowser useful for debugging

for(var i = 0; i < number; i++){


}

if(confirm("are you sure?"))

prompt("What is your name?", "josh");


DOM - document object model


in a sense your webpage is an instance


in a sense all the tags are nodes and you cna go through accepting informatino from these nodes



  <div id="taco">
      I could really go for some right now
    </div

console

document in a sense is the class instance of the document

document.getElementById("taco");
grabs the secion of taco or grabs taco

var tacoDiv = document.getElmentById("taco");

tacoDiv.innerHTML - returns i could really go for some right now
tacoDiv.id - returns id
tacoDiv.style - returns all the styles of that id
tacoDiv.style.color = "red"; - changes text to red


html/css - background-color: #ffaaaa

in programming you use camelcasing instead of -
programming - tacoDiv.style.backgroundColor = "#ffaaaa";

input css with a string
tacoDiv.style.padding = "10px";


html/css says make it look like this

javascript says make it do this


window object which refers to the browser itself


Window.onload = function() {
  alert("")

}

window.load
-not running just defining

window.load()
- running the function


other stuff

// // My First JS program!
// //
// // var firstName = "Jshua";
// // var lastName = "Cloward";
// // var fullName = firstName + " " + lastName;
// // var greeting = "Hello, my name is " + fullName;
// //
// // // greeting is NOT a function, so no parenths
// // // alert IS a function, so we use paraneths
// // console.log(greeting);
// //
// // var x = 1;
// // var y = 13;
// // var sum = x + y;
// // console.log("The sum of " + x + " and " + y + " is " + sum);
//
//
//
// var age = 21
//
// if(age >= 21)
//   {
//     console.log("YO! Let's hit up the club")
//   }
//   else if(age < 21 && age > 19)
//   {
//     console.log("sucky age")
//   }
//   else
//   {
//     console.log("Sorry, no club for you")
//   }
//
// var name = ['Joshua', 'Jason', 'Will'];
//
//   for(var i = 0;i < name.length;i++)
//   {
//     console.log(name[i]);
//   }
//
//
//
//   var people = [
//       {name: "Joshua", age: 21},
//       {name: "Ty", age: 27},
//       {name: "Fluffy", age: 3}
//     ];
//
//     for(i = 0; i < people.length; i++)
//     {
//       console.log(people[i].name)
//       console.log(people[i].age)
//     }
//
//
// if(confirm("Are you sure?"))
//   {
//     console.log("come in and have a drink!")
//   } else {
//     console.log("Yu must be 21 to enter")
//   }
//
//
//
// var AGE = prompt("What is your age?")
//
// if(parseInt(age) >= 18) {
//     console.log("You can vote")
//
// } else {
//   console.log("No voting for you yet")
// }

var tacoDiv = document.getElementById("taco")

window.onload = function() { // will be called regardless
    tacoDiv.style.backgroundColor = "red"
    window.setTimeout(function(){
      tacoDiv.style.color = "white";
    }, 3000)
}

input
hidden - allows you to have data that isn't displayed on the page
text - for a small line of text
password - automatically changes text visual to **** for secruity purposes
radio - multiple choice or O  ø when you click on one it fill it with a dark circle
      radio is meant to take a group of radio inputs and only allow you to select one
checkbox - []  []  []  allows you to select multiples
submit - give you a button automatically - styled like a button
reset - clear out all the data inside of your form

text area - for a large block of text
                            Types
                  <input> ---->  Hidden
                  <select>       Text ---->  plain text
                  <button>       radio       email
                  <textarea>     checkbox    url
                                             number
                                             password



<div>
  <form     action="where it goes"    method ="get or post" - do you want to get information or post information
                                              if you are getting back information then you use a get
                                              if you are posting information back to the site then you use a post

  </form>
</div>

Hyper Text Transfer Protocol
the thing that takes stuff to the place where the thing is, and gets the things from the palce with the stuff.

Domain Name System
some computers that turn your domain name into some numbers and back again.

Domain Name
http://www.**yourcoolwebsite.com** <- things that look like this
|_ _ _|   |            ^       ^-<-<- Top level Domain - TLD
   ^  | _ | _        Domain Name
   |         | - Sub Domain Name
Protocol


Hey DNS, can you tell me
where i can find

www.ruby-lang.org?
computer - - - - -> > >  DNS Server
  computer asks dns server where ruby server is

                      221.186.184.68
computer < - - -< - < - DNS Server
  Dns responds with the address of the server


Hyper Text Markup Language
the "stupid" web language. A Markup Language is NOT a programming language.

Cascading Style Sheets
  the thing that makes web look pretty.

JavaScript
  NOT to be confused with Java. This is the programming language that makes webpages fancy!

Relational Database Management System
A place to put your data.

looks like a spreadsheet

NGINX A webserver program. There's a bunch of others, too.

Webserver
A program that will send files from your website server to someone's browser.

       _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
       | Sinatra | - - - -> |  Webrick |- - - ->   Website
       |- - - - -|  Ruby    |- - - - - |

We have interwebz

www.w3schools.com html/css
teamtreehouse.com
www.codeschool.com
dochub.io - documentation on different stuff
Join a Ruby User Group in your city.

--------------
Quick recap

Type in URL
Get IP Address of site from DNS
Connect to webserver of website
Website connects to DB
Website gets files ready
Webersver serves up website
Your browswer downloads the requested page
----------------------------------------------

Website
Static. Not smart. Just provides information

Web Application
Dynamic. Does stuff. Think Gmail,Facebook,Amazon,etc...

******************************************************************************

 RRRRRRRRRRRR                             lll
 RRR        RRR                   iii     lll
 RRR        RRR                   iii     lll
 RRR      RRR                             lll
 RRR   RRRR          aaaaaa       iii     lll    ssssss
 RRR     RRR       aa   aaa       iii     lll   ss
 RRR      RRR      aa   aaaa      iii     lll    ssssss
 RRR       RRR     aa   aa aa     iii     lll         ss
 RRR        RRR      aaa    aa    iii     lll    ssssss

****************************************************************************

What is it?
  A Full-stack Web Application Framework.

Full-stack
  From database to what people see on the site, and everything in-between.

Framework
  Tons of code already written to make you lazy.

How Old?
  Started in 2004 by DHH for Basecamp
                      David Hinemar Hansen

Basecamp
project management used to go back adn forth between the client and developer

It's built in Ruby! Lets you ake applications quick, and easy.

Ruby Programming Language

Rails - Framework Built in Ruby

1. Fast Prototyping
2. Quick Deployment
3. Easy Iterations
4. Less time saves money
5. Open source is cheap

NodeJS
Express, Sails

Python
Django, Grok

PHP
Cake, Code ignitor, Fuel, Symfony, Kohana

Scala
Play,Lift

1. M - Model
2. V - View
3. C - Controller

O_o
 it's just organization ...

^_^
 Convention over Configuration.




rails new address_book
new rails app called adress book

rails generate scaffold
generates an exo-skeleton or structure for your rails
helps with construction
generally used for protoyping

never ever use scaffolding in a actual application

rails server
boots up page

generate is a command

scaffold is a arguement to generate

Contact is a arguement to scaffold

name:string , address:string is an attribute to the class Contact
do the name of the attribute then a : then the type of the attribute


rake allows you to make terminal based tasks
and handles instructions/code for you and then finishes

rake db:migrate
lets go ahead and connect to the database and then were
going to update the database with all the changes we made from rails

rails server
then we booted up the server specifically useing webrink at the moment locally

rails new generates a new rails structure


---Folders---
app folder - heavyiest and most important folder all the code that makes your application what it is goes inside here
  assets - images, javascripts, style sheets where you write stuff and put it in there 'your code' reason you put it in here prior to rails 3.0/2.0
      that stuff did go into the public directory the reason it was taken out and put into app assets is because rails comes with this thing called assets pipeline one of those
      things being comrpessing assets images/stylesheets/javascripts you dl all those files the larger the files is the longer it takes if you compress them it makes them smaller rail will comepress
      them for us so we can write these big giant files so rails will actually shrink them down for us sinatra actually does not do that for us you would have to do that manually in sinatra rails does
      it for us by adding it into assets rails also adds in cache files so if it changes rails will take care of it rails automatically cache this file the second its change rails updates it
  controllers - Models Views Controllers
  helpers - are Modules
  mailers - information that needs to be sent out, very common every use , user mailer ruby class that handles mailing users specifically, password resets, coupons, verifying
  models - real world objects that were modeling after  address book for instance modeling after an actually address book and the class doesn't have any methods in it but it does inheirit from activerecord::base it can do a ton of stuff because of the inheiritance
  views - what you see the actual pages
    layout - has the basic layout

bin - new to rails 4.0 is basically where you put programs your going to run IN the program app
      little mini programs your running in your application rake,bundle,rails,spring
config - configuration
  enviroment - set up different configuration files for different enviroments
  initializers - when your application first runs its gonna go through each initializer and run code
                your application has to connect to twitter so you can push/pull tweets you need a special key to connect to twitter
                in your initializer when your application boots set my password to be this value so when you conect to twitter you already have hte password set up
                or you want your program to be in a different language
  locales - by default rails knows how to make your website multi-language (english/spanish)
            create a .yaml file to make that into that language jp.yaml anytime i say hello in the app i mean oh hai oh gosaimasu
            create a dictionary for if i say this say (this) in japanese
  application - THE MAIN FILE every application has an entry point file  sinatra we made app.rb
                for rails its this file requires files requires dependencys tells bundler to require everything in bundler
                sets up module add in current config settings too
  boot.rb   not really going to touch

  database.yml - sets up database stuff KEEP PROTECTED
  enviroment.rb initializes application not really going to touch
  routes.rb - anytime you wanna specifiy a route whether it be to post to a contact for or gets to another page
              gets/posts even though forms do generally either gets or posts you have access to options, deletes rails does the transition for us
  secrets.yaml - in real life scenario this file would be protected holds special keys/passwords


db - DataBase
  migrate- db:migrate that rake task looks inside the db>migrate folder file is a ruby class
  development.sqlite3 - ruby gem that is a wrapper around handling the sqlite3 database
            sqlite is its own program because it has nothing to do with ruby you need a way for ruby to talk to it so we add in a gem
            sqlite3 is teh database and thats where it gets stored inside of sqlite3
  schema.rb - you will never touch auto-generated file, running rake db:migrate generates it schema is the blueprints of your database how the database is constructed
            it is a great file to use as reference KEEP PROTECTED
  seeds.rb - meant for putting data that your application requires to start up
              used for fake data simulate users or other such things how does my site run with 1000 users?

lib - assets isn't really used
   tasks >> there might be a time where you have to build your own rake task when you
      do you add it into this folder when you add it rails will automatically pick it up and add it into the application for you


log - development log seperate enviroments where different things are gonna run
      the other being production enviroment so you can segment the log files to
      log out information depending on which department were in in this case
      everything locally everything we do locally will be saved in this file really
      good for debugging applications

public - you don't want to show how your app works the only thing that the populace sees but in rails everything is private other then whats in the public folder
  404.html server error message if page does not exist
  422.html
  500.html - server error message broken
  favicon.ico - favorites icon
  robots.txt - a program that has its own brain and knows how to do something,
          robots.txt does is either allow or disallow webcrawlers or
        block a specific page from being index'd from say a googles webcrawlers
  humans.txt - a place to show who built the application and what programs they used to build it

test - we are asserting that if we take 1 and add 1 it will = 2
       we right code in our tests folder when i run this method it will always give me the value i want
       i am 100% positive that every single time i run this is it will work and i will get back the result i want
       a place to store code to test your code

tmp - temporarily stores stuff and then you will delete it out of there
      all kinds of files will be added in there for you
      generally you never have to add stuff in

vendor - both js and css
   used for third paty javascript and css implementation
   Things used in your application but built by someone else
  .keep - git thing folder is empty but i want to keep it inside of my repository


---Files---
.Ds_Store

.gitignore - might have a file in here that lists all of the logins and passwords for all the different things
              how the application connects to the server or database so you would tell the gitignore to ignore my secret password file

config.ru -all rack applications use config.ru for basically serving up there information with centralized rack concept rack applications are
            like legos and each peices of legos are programs you can connect them together as many times as you want by having the
            config.ru that is the lego end point you can basically have a rails app inside of a rails app inside of a rails app or a sinatra app
            thats inside of a rails app, sinatra is a rack application, rails is a rack application,

README.rdoc - file with some instructions welcome to rails heres how its started rdoc documentation

Rakefile - tells that rake application what rake stuff we have, without this rake db:migrate would not work, sets it up where
            we can add up our own custom rake tasks- normally never touch it

Gemfile - rails does the source and lists all the gems that are required to run rails



==============
Data Storage
==============

Data Storage Mediums

* File System - flat files, really slow text/notes/yaml

* Memory - extremely fast, fastest way to save/retreive, saved on the RAM, if restart computer might be lost

* Database - programs that store data, most stable way, most stable

---------------------------
Database Types
-----------------------------------------------------------------------

* SQL (Sequal-structured english query language) - programming language

    Commands are all in caps
SELECT * - * means everything - select all of the columns
FROM `languages` - in the language table
WHERE `lanugages.name` = "Ruby" where the language name column is equal to ruby, table called languages in a list it has programming language
LIMIT 1 - limits to 1
ORDER BY `id` DESC; ordre by id in descending order

Common SQL DB (programs/apps made in/for SQL)
* MySQL - big names use this, requires database engineer
* PostgreSQL - new kid on the block
* SQLite3 - been around for awhile more of a super small liter end database, some small video games use SQLite3 save like 3 different games or for mobile apps
* SQLServer - been around for quite a bit specifically microsoft product very expensive, very large interprise like banks
* Oracle - kind of has its own version of SQL

------------------------------------------------------

* NoSQL
  *  db.find({name:'Ruby'}).limit(1).order('name');
  *  uses javascript
  *  NoSQL is not relational -you have to query and then put together
  *  NoSQL databases are way faster
  *  Optomized for reading
Common NoSQL DB
  * CouchDB
  * MongoDB - optomized for readability
  * RethinkDB


  idea is put data into database with SQL
  and then pull it out with NoSQL
  MOSQL transferes data from SQL to NoSQL

--------------------------------------------

* Graph
  * Neo4J -
  * Oracle Spatial
  * Titan

Not Necessarily a SQL Database or a NoSQL Database own special type

series of Nodes(circles) and Edges(lines) edges connect Nodes together

------------------------------------------------------------------------

==============================================================

  PPPPP
  P   PPP                t
  PPPPP                 ttt
  P        oo     __     t       ggg   r_--_   eee
  P       o  o   s__     t  t   g  g   r      e---e
  P        oo     __s     tt     ggg   r       e__-
                                   g
                                g  g
                                 gg
==============================================================
by caching your application you can gain lots of speed and the faster your app runs the more users you can have
index a particular column saying im gonna be using this a lot
HStore

GIS Geospatial - allows you to store geo points into your database (coordinates, latitude, longitude)

Full-text search - allows you to search for specific text even if you mispelt it

new columns! -

String
text
datetime
date
time
float

Array - postgre specific









new rails elephant -d postgresql

inside of comfig / database.yml add in host:localhost under elephant_development

check for pg gem in Gemfile

have to create database manually
rake db:create
if it works you should be on the next line
if its not sqlite you have to create the database

generate scaffolding

manually adjust and add things into database
because its not rails its a seperate program
rake db:migrate


rails console - puts you in a irb with a rails enviroment
Rails.env


twitter bootstrap
